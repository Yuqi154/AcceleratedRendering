#version 460 core

struct Vertex {
    float x;
    float y;
    float z;
    uint color;
    float u0;
    float v0;
    uint uv2;
};

struct VaryingData {
    int offset;
    int sharing;
    int mesh;
    int flags;
};

struct SharingData {
    mat4 transform;
    mat3 normal;
};

layout(local_size_x = 128) in;

layout(binding=0, std430) readonly buffer VerticesIn {
    Vertex verticesIn[];
};

layout(binding=1, std430) writeonly buffer VerticesOut {
    Vertex verticesOut[];
};

layout(binding=2, std430) readonly buffer Sharings {
    SharingData sharings[];
};

layout(binding=3, std430) readonly buffer Varyings {
    VaryingData varyings[];
};

layout(binding=4, std430) readonly buffer Meshes {
    Vertex meshVertices[];
};

layout(location=0) uniform uint vertexCount;
layout(location=1) uniform uint vertexOffset;

void main() {
    uint indexIn = gl_GlobalInvocationID.x;
    uint indexOut = indexIn + vertexOffset;

    if (indexIn >= vertexCount) {
        return;
    }

    int offset = varyings[indexIn].offset;
    uint reference = indexIn - offset;
    int sharing = varyings[reference].sharing;
    int mesh = varyings[reference].mesh;

    mat4 transformMatrix;
    // mat3 normalMatrix;

    Vertex vertex;
    vec4 refColor;
    uvec2 refUv2;

    if (sharing != -1) {
        transformMatrix = sharings[sharing].transform;
        // normalMatrix = sharings[sharing].normal;
    } else {
        transformMatrix = mat4(1.0);
        // normalMatrix = mat3(1.0);
    }

    if (mesh != -1) {
        vertex = meshVertices[mesh + offset];
        refColor = unpackUnorm4x8(verticesIn[reference].color);
        refUv2 = floatBitsToUint(unpackSnorm2x16(verticesIn[reference].uv2));
    } else {
        vertex = verticesIn[indexIn];
        refColor = vec4(1.0);
        refUv2 = uvec2(0u);
    }

    vec4 pos = transformMatrix * vec4(vertex.x, vertex.y, vertex.z, 1.0);
    vec4 color = refColor * unpackUnorm4x8(vertex.color);
    uvec2 uv2 = max(floatBitsToUint(unpackSnorm2x16(vertex.uv2)), refUv2);
    // vec3 normal = normalize(normalMatrix * unpackSnorm4x8(vertex.normal).xyz);

    verticesOut[indexOut].x = pos.x;
    verticesOut[indexOut].y = pos.y;
    verticesOut[indexOut].z = pos.z;

    verticesOut[indexOut].u0 = vertex.u0;
    verticesOut[indexOut].v0 = vertex.v0;

    verticesOut[indexOut].color = packUnorm4x8(color);
    // verticesOut[indexOut].uv1 = verticesIn[reference].uv1;
    verticesOut[indexOut].uv2 = packSnorm2x16(uintBitsToFloat(uv2));

    // verticesOut[indexOut].normal = packSnorm4x8(vec4(normal, 0.0));
}