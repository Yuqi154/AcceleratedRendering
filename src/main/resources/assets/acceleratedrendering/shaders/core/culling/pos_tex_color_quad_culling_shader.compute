#version 460 core

struct Vertex {
    float x;
    float y;
    float z;
    float u0;
    float v0;
    uint color;
};

struct VaryingData {
    int offset;
    int sharing;
    int mesh;
    int flags;
};

struct SharingData {
    mat4 transform;
    mat3 normal;
};

struct Polygon {
    uint vertex1;
    uint vertex2;
    uint vertex3;
};

layout(local_size_x = 128) in;

layout(binding=1, std430) readonly buffer Vertices {
    Vertex vertices[];
};

layout(binding=2, std430) readonly buffer Sharings {
    SharingData sharings[];
};

layout(binding=3, std430) readonly buffer Varyings {
    VaryingData varyings[];
};

layout(binding=6, std430) writeonly buffer PolygonsOut {
    Polygon polygonsOut[];
};

layout(binding=0, offset=0) uniform atomic_uint indexCounter;

layout(location=0) uniform mat4 viewMatrix;
layout(location=1) uniform uint polygonCount;
layout(location=2) uniform uint vertexOffset;

bool isNormalVisable(vec3 pos, vec3 normal);

void main() {
    uint index = gl_GlobalInvocationID.x;
    uint base = index * 4u;

    if (index >= polygonCount) {
        return;
    }

    uint index1 = vertexOffset + base + 0u;
    uint index2 = vertexOffset + base + 1u;
    uint index3 = vertexOffset + base + 2u;
    uint index4 = vertexOffset + base + 3u;

    uint flags = varyings[index - varyings[index1].offset].flags;
    uint noCull = flags & 0x1u;

    Vertex vertex1 = vertices[index1];
    Vertex vertex2 = vertices[index2];
    Vertex vertex3 = vertices[index3];
    Vertex vertex4 = vertices[index4];

    vec3 pos1 = vec3(vertex1.x, vertex1.y, vertex1.z);
    vec3 pos2 = vec3(vertex2.x, vertex2.y, vertex2.z);
    vec3 pos3 = vec3(vertex3.x, vertex3.y, vertex3.z);
    vec3 pos4 = vec3(vertex4.x, vertex4.y, vertex4.z);
    vec3 normal = cross(pos2 - pos1, pos3 - pos1);

    if (noCull > 0u
            || isNormalVisable(pos1, normal)
            || isNormalVisable(pos2, normal)
            || isNormalVisable(pos3, normal)
            || isNormalVisable(pos4, normal)
    ) {
        uint indexOut = atomicCounterAdd(indexCounter, 6u) / 3u;

        polygonsOut[indexOut + 0].vertex1 = index1;
        polygonsOut[indexOut + 0].vertex2 = index2;
        polygonsOut[indexOut + 0].vertex3 = index3;

        polygonsOut[indexOut + 1].vertex1 = index3;
        polygonsOut[indexOut + 1].vertex2 = index4;
        polygonsOut[indexOut + 1].vertex3 = index1;
    }
}

bool isNormalVisable(vec3 pos, vec3 normal) {
    vec4 posStart = vec4(pos, 1.0);
    vec4 posEnd = posStart + vec4(normal, 0.0);

    posStart = viewMatrix * posStart;
    posEnd = viewMatrix * posEnd;
    normal = normalize((posEnd - posStart).xyz);

    vec3 ref = normalize(-posStart.xyz);
    float result = dot(ref, normal);

    return result >= 0;
}